#include<iostream>
#include<conio.h>
#include<stack>
#include <algorithm>
using namespace std;

class Solution {
public:
	int longestValidParentheses(string s) {
		int length = s.length();
		if (length <= 1)
			return 0;
		int dp[100000], state[100000];
		stack<char> character;
		for (int i = 0; i < length; i++) {
			dp[i] = 0;
			state[i] = 0;
		}
		for (int j = 1; j < length; j++) {
			while (!character.empty())
				character.pop();
			if (s[j] == ')') {
				character.push(s[j]);
				int temp = 0;
				for (int i = j - 1; i >= 0; i--) {
					if (s[i] == ')')
						character.push(s[i]);
					else {
						if (character.empty()) {
							break;
						}
						character.pop();
						temp++;
						if (character.empty()) {
							state[j] += temp;
							temp = 0;
						}
					}
				}
			}
			dp[j] = max(state[j], dp[j - 1]);
		}
		return dp[length - 1] * 2;
	}
};


int main() {
	Solution s;
	string str
	cout << s.longestValidParentheses(str)<<endl;
	_getch();
	return 0;
}